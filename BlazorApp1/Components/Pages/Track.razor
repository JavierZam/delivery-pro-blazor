@page "/track"
@page "/track/{OrderId}"
@inject IOrderService OrderService
@using BlazorApp1.Domain.Entities
@using BlazorApp1.Domain.Enums

<PageTitle>Track Order - DeliveryPro</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="text-4xl font-bold text-gray-900 mb-4">Track Your Order</h1>
            <p class="text-xl text-gray-600">Real-time updates on your delivery</p>
        </div>

        @if (string.IsNullOrEmpty(OrderId))
        {
            <!-- Order ID Input -->
            <div class="card p-8 text-center">
                <h2 class="text-xl font-semibold mb-6">Enter your Order ID</h2>
                <div class="max-w-md mx-auto">
                    <input @bind="searchOrderId" @onkeypress="HandleKeyPress" 
                           placeholder="Order ID (e.g., abc123de)" 
                           class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 mb-4" />
                    <button @onclick="SearchOrder" class="btn btn-primary w-full">
                        üîç Track Order
                    </button>
                </div>
            </div>
        }
        else
        {
            @if (currentOrder == null && !isLoading)
            {
                <div class="card p-8 text-center">
                    <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <span class="text-3xl">‚ùå</span>
                    </div>
                    <h2 class="text-xl font-semibold text-gray-900 mb-2">Order Not Found</h2>
                    <p class="text-gray-600 mb-6">We couldn't find an order with ID: @OrderId</p>
                    <button @onclick="ResetSearch" class="btn btn-outline">Search Another Order</button>
                </div>
            }
            else if (isLoading)
            {
                <div class="text-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
                    <p class="mt-4 text-gray-600">Loading order details...</p>
                </div>
            }
            else if (currentOrder != null)
            {
                <!-- Order Details -->
                <div class="card p-6 mb-6">
                    <div class="flex justify-between items-start mb-4">
                        <div>
                            <h2 class="text-xl font-semibold text-gray-900">Order #@currentOrder.Id[..8]</h2>
                            <p class="text-gray-600">Placed on @currentOrder.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</p>
                        </div>
                        <span class="@GetStatusBadgeClass(currentOrder.Status)">
                            @GetStatusDisplay(currentOrder.Status)
                        </span>
                    </div>

                    <div class="border-t pt-4">
                        <p class="text-gray-900 font-medium">Delivering to:</p>
                        <p class="text-gray-600">
                            @currentOrder.DeliveryAddress.Street<br />
                            @currentOrder.DeliveryAddress.City, @currentOrder.DeliveryAddress.State @currentOrder.DeliveryAddress.PostalCode
                        </p>
                    </div>
                </div>

                <!-- Progress Tracker -->
                <div class="card p-6 mb-6">
                    <h3 class="text-lg font-semibold mb-6">Order Progress</h3>
                    <div class="space-y-6">
                        @foreach (var step in GetTrackingSteps())
                        {
                            <div class="flex items-center">
                                <div class="@GetStepIconClass(step.Status, currentOrder.Status)">
                                    @step.Icon
                                </div>
                                <div class="ml-4 flex-1">
                                    <p class="@GetStepTextClass(step.Status, currentOrder.Status)">@step.Title</p>
                                    <p class="text-sm text-gray-500">@step.Description</p>
                                    @if (step.Status == currentOrder.Status)
                                    {
                                        <p class="text-sm text-primary-600 font-medium">@GetEstimatedTime(step.Status)</p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Order Items -->
                <div class="card p-6">
                    <h3 class="text-lg font-semibold mb-4">Order Items</h3>
                    <div class="space-y-3">
                        @foreach (var item in currentOrder.Items)
                        {
                            <div class="flex justify-between items-center">
                                <span>@item.Quantity√ó @item.ProductName</span>
                                <span class="font-medium">$@item.Subtotal.ToString("F2")</span>
                            </div>
                        }
                    </div>
                    <div class="border-t pt-3 mt-3">
                        <div class="flex justify-between items-center font-semibold text-lg">
                            <span>Total</span>
                            <span>$@currentOrder.TotalAmount.ToString("F2")</span>
                        </div>
                    </div>
                </div>

                <div class="mt-6 text-center">
                    <button @onclick="ResetSearch" class="btn btn-outline">Track Another Order</button>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string? OrderId { get; set; }
    
    private Order? currentOrder;
    private string searchOrderId = "";
    private bool isLoading = false;

    private class TrackingStep
    {
        public OrderStatus Status { get; set; }
        public string Icon { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(OrderId))
        {
            await LoadOrder(OrderId);
        }
    }

    private async Task SearchOrder()
    {
        if (!string.IsNullOrEmpty(searchOrderId))
        {
            await LoadOrder(searchOrderId);
        }
    }

    private async Task LoadOrder(string orderId)
    {
        isLoading = true;
        currentOrder = await OrderService.GetOrderByIdAsync(orderId);
        isLoading = false;
    }

    private void ResetSearch()
    {
        OrderId = null;
        currentOrder = null;
        searchOrderId = "";
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchOrder();
        }
    }

    private List<TrackingStep> GetTrackingSteps()
    {
        return [
            new() { Status = OrderStatus.Pending, Icon = "‚è≥", Title = "Order Received", Description = "We've received your order" },
            new() { Status = OrderStatus.Confirmed, Icon = "‚úÖ", Title = "Order Confirmed", Description = "Restaurant confirmed your order" },
            new() { Status = OrderStatus.Preparing, Icon = "üë®‚Äçüç≥", Title = "Preparing", Description = "Your food is being prepared" },
            new() { Status = OrderStatus.Ready, Icon = "üì¶", Title = "Ready for Pickup", Description = "Food is ready, waiting for delivery" },
            new() { Status = OrderStatus.OutForDelivery, Icon = "üöö", Title = "Out for Delivery", Description = "Driver is on the way to you" },
            new() { Status = OrderStatus.Delivered, Icon = "üè†", Title = "Delivered", Description = "Order has been delivered" }
        ];
    }

    private string GetStepIconClass(OrderStatus stepStatus, OrderStatus currentStatus)
    {
        var baseClass = "w-10 h-10 rounded-full flex items-center justify-center text-lg";
        
        if ((int)stepStatus <= (int)currentStatus)
        {
            return $"{baseClass} bg-primary-100 text-primary-600";
        }
        
        return $"{baseClass} bg-gray-100 text-gray-400";
    }

    private string GetStepTextClass(OrderStatus stepStatus, OrderStatus currentStatus)
    {
        if ((int)stepStatus <= (int)currentStatus)
        {
            return "font-medium text-gray-900";
        }
        
        return "text-gray-500";
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        var baseClass = "px-3 py-1 rounded-full text-sm font-medium";
        
        return status switch
        {
            OrderStatus.Pending => $"{baseClass} bg-yellow-100 text-yellow-800",
            OrderStatus.Confirmed => $"{baseClass} bg-blue-100 text-blue-800",
            OrderStatus.Preparing => $"{baseClass} bg-orange-100 text-orange-800",
            OrderStatus.Ready => $"{baseClass} bg-purple-100 text-purple-800",
            OrderStatus.OutForDelivery => $"{baseClass} bg-indigo-100 text-indigo-800",
            OrderStatus.Delivered => $"{baseClass} bg-green-100 text-green-800",
            OrderStatus.Cancelled => $"{baseClass} bg-red-100 text-red-800",
            _ => $"{baseClass} bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusDisplay(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "‚è≥ Pending",
            OrderStatus.Confirmed => "‚úÖ Confirmed",
            OrderStatus.Preparing => "üë®‚Äçüç≥ Preparing",
            OrderStatus.Ready => "üì¶ Ready",
            OrderStatus.OutForDelivery => "üöö Out for Delivery",
            OrderStatus.Delivered => "‚úÖ Delivered",
            OrderStatus.Cancelled => "‚ùå Cancelled",
            _ => status.ToString()
        };
    }

    private string GetEstimatedTime(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Usually confirmed within 2-3 minutes",
            OrderStatus.Confirmed => "Preparation starting...",
            OrderStatus.Preparing => "Estimated 15-20 minutes",
            OrderStatus.Ready => "Driver will pick up soon",
            OrderStatus.OutForDelivery => "Estimated arrival in 10-15 minutes",
            OrderStatus.Delivered => "Thank you for your order!",
            _ => ""
        };
    }
}