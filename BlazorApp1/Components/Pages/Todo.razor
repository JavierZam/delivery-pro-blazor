@page "/todo"
@rendermode InteractiveServer
@using BlazorApp1.Models
@using BlazorApp1.Services
@inject ITodoService TodoService

<PageTitle>Todo List</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <h1>üìã Todo List</h1>
            
            @* Add New Todo Form *@
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Add New Task</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input @bind="newTodo.Title" class="form-control" placeholder="Enter task title" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea @bind="newTodo.Description" class="form-control" rows="2" placeholder="Enter task description"></textarea>
                    </div>
                    <button @onclick="AddTodo" class="btn btn-primary" disabled="@(string.IsNullOrWhiteSpace(newTodo.Title))">
                        ‚ûï Add Task
                    </button>
                </div>
            </div>

            @* Todo List *@
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5>Tasks (@completedCount/@totalCount completed)</h5>
                    <button @onclick="LoadTodos" class="btn btn-outline-secondary btn-sm">
                        üîÑ Refresh
                    </button>
                </div>
                <div class="card-body">
                    @if (todos.Any())
                    {
                        @foreach (var todo in todos)
                        {
                            <div class="border rounded p-3 mb-2 @(todo.IsCompleted ? "bg-light" : "")">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <div class="d-flex align-items-center mb-2">
                                            <input type="checkbox" 
                                                   @onchange="() => ToggleComplete(todo.Id)" 
                                                   checked="@todo.IsCompleted" 
                                                   class="form-check-input me-2" />
                                            <h6 class="mb-0 @(todo.IsCompleted ? "text-decoration-line-through text-muted" : "")">
                                                @todo.Title
                                            </h6>
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(todo.Description))
                                        {
                                            <p class="mb-1 text-muted @(todo.IsCompleted ? "text-decoration-line-through" : "")">
                                                @todo.Description
                                            </p>
                                        }
                                        <small class="text-muted">
                                            Created: @todo.CreatedAt.ToString("MMM dd, HH:mm")
                                            @if (todo.CompletedAt.HasValue)
                                            {
                                                <span> | Completed: @todo.CompletedAt.Value.ToString("MMM dd, HH:mm")</span>
                                            }
                                        </small>
                                    </div>
                                    <div class="ms-2">
                                        <button @onclick="() => EditTodo(todo)" class="btn btn-sm btn-outline-primary me-1">
                                            ‚úèÔ∏è
                                        </button>
                                        <button @onclick="() => DeleteTodo(todo.Id)" class="btn btn-sm btn-outline-danger"
                                                @onclick:preventDefault="true">
                                            üóëÔ∏è
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted py-4">
                            <p>No tasks yet. Add your first task above! üéØ</p>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        @* Edit Modal *@
        @if (editingTodo != null)
        {
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Edit Task</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Title</label>
                            <input @bind="editingTodo.Title" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea @bind="editingTodo.Description" class="form-control" rows="3"></textarea>
                        </div>
                        <div class="d-grid gap-2">
                            <button @onclick="SaveEdit" class="btn btn-success">üíæ Save</button>
                            <button @onclick="CancelEdit" class="btn btn-secondary">‚ùå Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<TodoItem> todos = new();
    private TodoItem newTodo = new();
    private TodoItem? editingTodo = null;
    
    private int totalCount => todos.Count;
    private int completedCount => todos.Count(t => t.IsCompleted);

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    private async Task LoadTodos()
    {
        todos = await TodoService.GetAllAsync();
        StateHasChanged(); // Force UI refresh
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodo.Title)) return;

        await TodoService.CreateAsync(newTodo);
        newTodo = new TodoItem(); // Reset form
        await LoadTodos();
    }

    private async Task ToggleComplete(int id)
    {
        await TodoService.ToggleCompleteAsync(id);
        await LoadTodos();
    }

    private async Task DeleteTodo(int id)
    {
        await TodoService.DeleteAsync(id);
        await LoadTodos();
    }

    private void EditTodo(TodoItem todo)
    {
        // Create a copy to avoid direct binding issues
        editingTodo = new TodoItem
        {
            Id = todo.Id,
            Title = todo.Title,
            Description = todo.Description,
            IsCompleted = todo.IsCompleted,
            CreatedAt = todo.CreatedAt,
            CompletedAt = todo.CompletedAt
        };
    }

    private async Task SaveEdit()
    {
        if (editingTodo == null) return;

        await TodoService.UpdateAsync(editingTodo);
        editingTodo = null;
        await LoadTodos();
    }

    private void CancelEdit()
    {
        editingTodo = null;
    }
}