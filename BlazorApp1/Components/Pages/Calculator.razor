@page "/calculator"
@rendermode InteractiveServer

<PageTitle>Calculator</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header text-center">
                    <h3>ðŸ§® Calculator</h3>
                </div>
                <div class="card-body">
                    
                    @* Display Screen *@
                    <div class="calculator-display mb-3">
                        <div class="form-control calculator-screen text-end" style="font-size: 1.5rem; height: 60px; line-height: 1.8;">
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <span class="text-danger">@errorMessage</span>
                            }
                            else
                            {
                                <span>@displayValue</span>
                            }
                        </div>
                        <small class="text-muted">
                            @if (!string.IsNullOrEmpty(operationHistory))
                            {
                                <span>History: @operationHistory</span>
                            }
                        </small>
                    </div>

                    @* Button Grid *@
                    <div class="calculator-buttons">
                        <div class="row g-2 mb-2">
                            <div class="col-3">
                                <button class="btn btn-secondary w-100" @onclick="Clear">C</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-secondary w-100" @onclick="ClearEntry">CE</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-secondary w-100" @onclick="Backspace">âŒ«</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-warning w-100" @onclick="() => SetOperation('/')">/</button>
                            </div>
                        </div>

                        <div class="row g-2 mb-2">
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('7')">7</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('8')">8</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('9')">9</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-warning w-100" @onclick="() => SetOperation('*')">Ã—</button>
                            </div>
                        </div>

                        <div class="row g-2 mb-2">
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('4')">4</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('5')">5</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('6')">6</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-warning w-100" @onclick="() => SetOperation('-')">-</button>
                            </div>
                        </div>

                        <div class="row g-2 mb-2">
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('1')">1</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('2')">2</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('3')">3</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-warning w-100" @onclick="() => SetOperation('+')">+</button>
                            </div>
                        </div>

                        <div class="row g-2 mb-2">
                            <div class="col-6">
                                <button class="btn btn-primary w-100" @onclick="() => InputDigit('0')">0</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-primary w-100" @onclick="InputDecimal">.</button>
                            </div>
                            <div class="col-3">
                                <button class="btn btn-success w-100" @onclick="Calculate">=</button>
                            </div>
                        </div>
                    </div>

                    @* Keyboard Support Info *@
                    <div class="mt-3">
                        <small class="text-muted">
                            ðŸ’¡ <strong>Keyboard Support:</strong> Use number keys, +, -, *, /, Enter (=), Escape (C), Backspace
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // State Variables (Learning: Private fields as component state)
    private string displayValue = "0";
    private string operationHistory = "";
    private string errorMessage = "";
    
    private double currentValue = 0;
    private double previousValue = 0;
    private string currentOperation = "";
    private bool isNewCalculation = true;

    // Learning: Component Lifecycle
    protected override async Task OnInitializedAsync()
    {
        // Setup any initial state if needed
        await Task.CompletedTask;
    }

    // Learning: Event Handlers - Simple actions
    private void InputDigit(char digit)
    {
        ClearError();
        
        if (isNewCalculation)
        {
            displayValue = digit.ToString();
            isNewCalculation = false;
        }
        else
        {
            if (displayValue == "0")
                displayValue = digit.ToString();
            else
                displayValue += digit;
        }
    }

    private void InputDecimal()
    {
        ClearError();
        
        if (isNewCalculation)
        {
            displayValue = "0.";
            isNewCalculation = false;
        }
        else if (!displayValue.Contains('.'))
        {
            displayValue += ".";
        }
    }

    // Learning: Method with parameter
    private void SetOperation(char operation)
    {
        ClearError();
        
        if (!isNewCalculation && !string.IsNullOrEmpty(currentOperation))
        {
            // Chain operations
            Calculate();
        }
        
        if (double.TryParse(displayValue, out double value))
        {
            previousValue = value;
            currentOperation = operation.ToString();
            operationHistory = $"{previousValue} {currentOperation}";
            isNewCalculation = true;
        }
    }

    // Learning: Complex business logic
    private void Calculate()
    {
        ClearError();
        
        if (string.IsNullOrEmpty(currentOperation) || isNewCalculation)
            return;

        if (!double.TryParse(displayValue, out double currentVal))
        {
            ShowError("Invalid number");
            return;
        }

        try
        {
            double result = currentOperation switch
            {
                "+" => previousValue + currentVal,
                "-" => previousValue - currentVal,
                "*" => previousValue * currentVal,
                "/" => currentVal != 0 ? previousValue / currentVal : throw new DivideByZeroException(),
                _ => currentVal
            };

            // Update history
            operationHistory = $"{previousValue} {currentOperation} {currentVal} = {result}";
            
            // Display result
            displayValue = FormatResult(result);
            
            // Reset for next calculation
            currentValue = result;
            previousValue = result;
            currentOperation = "";
            isNewCalculation = true;
        }
        catch (DivideByZeroException)
        {
            ShowError("Cannot divide by zero");
        }
        catch (Exception ex)
        {
            ShowError($"Error: {ex.Message}");
        }
    }

    // Learning: Helper methods
    private string FormatResult(double result)
    {
        // Handle very large/small numbers
        if (Math.Abs(result) >= 1e15 || (Math.Abs(result) <= 1e-15 && result != 0))
        {
            return result.ToString("E2");
        }
        
        // Remove unnecessary decimal places
        if (result == Math.Floor(result))
        {
            return result.ToString("F0");
        }
        
        var formatted = result.ToString("F10").TrimEnd('0').TrimEnd('.');
        return string.IsNullOrEmpty(formatted) ? "0" : formatted;
    }

    // Learning: State management methods
    private void Clear()
    {
        displayValue = "0";
        operationHistory = "";
        currentValue = 0;
        previousValue = 0;
        currentOperation = "";
        isNewCalculation = true;
        ClearError();
    }

    private void ClearEntry()
    {
        displayValue = "0";
        isNewCalculation = true;
        ClearError();
    }

    private void Backspace()
    {
        ClearError();
        
        if (displayValue.Length > 1)
        {
            displayValue = displayValue.Substring(0, displayValue.Length - 1);
        }
        else
        {
            displayValue = "0";
        }
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        // Clear error after 3 seconds
        Task.Delay(3000).ContinueWith(async _ => 
        {
            errorMessage = "";
            await InvokeAsync(StateHasChanged);
        });
    }

    private void ClearError()
    {
        errorMessage = "";
    }

    // Learning: Keyboard support (Advanced)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AddKeyboardListener();
        }
    }

    private async Task AddKeyboardListener()
    {
        // Note: This is a simplified version. Real implementation would use JS interop
        await Task.CompletedTask;
    }
}